!function(){"use strict";function f(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var v=document.querySelector(".header__btn"),m=document.querySelector(".nav"),t=f(m.querySelectorAll(".nav__link--submenu")),n=f(m.querySelectorAll(".nav__submenu-wrap")),h=document.querySelector(".overlay"),p=f(document.querySelectorAll(".modal"));v&&v.addEventListener("click",function(){v.classList.toggle("toggle"),h.classList.toggle("show"),m.classList.toggle("open")}),h.addEventListener("click",function(){var t=v.classList.contains("toggle")||m.classList.contains("open"),e=f(document.querySelectorAll(".modal__wrap-hidden"));if(t&&(v.classList.remove("toggle"),h.classList.remove("show"),m.classList.remove("open")),0<p.length){var n=!0,i=!1,r=void 0;try{for(var o,a=p[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){o.value.classList.remove("show")}}catch(t){i=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(i)throw r}}h.classList.remove("show","show-modal")}if(0<e.length){var l=!0,s=!1,u=void 0;try{for(var c,d=e[Symbol.iterator]();!(l=(c=d.next()).done);l=!0){c.value.classList.remove("show")}}catch(t){s=!0,u=t}finally{try{l||null==d.return||d.return()}finally{if(s)throw u}}}}),document.documentElement.clientWidth<=1170&&t.forEach(function(t,e){t.addEventListener("click",function(t){t.preventDefault(),n[e].classList.toggle("open")})});var e,i,r=document.querySelector(".user__menu-link--submenu");r&&(i="open",(e=r).addEventListener("click",function(t){t.preventDefault(),e.classList.toggle(i)}));var o=f(document.querySelectorAll(".scheduler-food__btn-submenu")),a=f(document.querySelectorAll(".scheduler-food__item-dropdown"));0<o.length&&o.forEach(function(t,e){t.addEventListener("click",function(){t.classList.toggle("open"),a[e].classList.toggle("open")})});var l=f(document.querySelectorAll(".buy__item-arrow")),s=f(document.querySelectorAll(".buy__item-dropdown"));0<l.length&&l.forEach(function(e,n){e.addEventListener("click",function(){if(e.classList.contains("open"))e.classList.remove("open"),s[n].classList.remove("open"),s[n].parentElement.classList.remove("open");else{for(var t=0;t<l.length;t++)l[t].classList.remove("open"),s[t].classList.remove("open"),s[t].parentElement.classList.remove("open");e.classList.add("open"),s[n].classList.add("open"),s[n].parentElement.classList.add("open")}})});var u=f(document.querySelectorAll(".buy__item-action")),c=f(document.querySelectorAll(".buy__item-action + .actions"));0<u.length&&u.forEach(function(e,n){e.addEventListener("click",function(){if(e.classList.contains("show"))e.classList.remove("show"),c[n].classList.remove("show");else{for(var t=0;t<u.length;t++)u[t].classList.remove("show"),c[t].classList.remove("show");e.classList.add("show"),c[n].classList.add("show")}})}),document.documentElement.addEventListener("click",function(t){var e=document.createElement("div"),n=document.querySelector(".actions.show")||e,i=document.querySelector(".buy__item-action.show")||e;t.target===i||t.target===n||n.contains(t.target)||(n.classList.remove("show"),i.classList.remove("show"))});var d=f(document.querySelectorAll(".diary__dish-btn-submenu")),y=f(document.querySelectorAll(".diary__dish-wrapper"));if(0<d.length)for(var g=function(t){d[t].addEventListener("click",function(){d[t].classList.toggle("open"),y[t].classList.toggle("open")})},b=0,w=d.length;b<w;b++)g(b);var x=f(document.querySelectorAll(".subscriptions-inner__btn")),L=f(document.querySelectorAll(".subscriptions-inner__wrapper"));if(0<x.length)for(var E=function(t){x[t].addEventListener("click",function(){x[t].classList.toggle("open"),L[t].classList.toggle("open")})},S=0,C=x.length;S<C;S++)E(S);var M=f(document.querySelectorAll(".modal")),T=f(document.querySelectorAll(".modal__btn-close")),A=document.querySelector(".overlay"),_=f(document.querySelectorAll(".buy__item-add")),k=document.querySelector(".modal--buy");0<_.length&&_.forEach(function(t){t.addEventListener("click",function(){A.classList.add("show","show-modal"),k.classList.add("show")})});var q=f(document.querySelectorAll(".modal__wrap-hidden"));0<T.length&&T.forEach(function(t,o){t.addEventListener("click",function(){if(M[o].classList.remove("show"),A.classList.remove("show","show-modal"),0<q.length){var t=!0,e=!1,n=void 0;try{for(var i,r=q[Symbol.iterator]();!(t=(i=r.next()).done);t=!0){i.value.classList.remove("show")}}catch(t){e=!0,n=t}finally{try{t||null==r.return||r.return()}finally{if(e)throw n}}}})});var N=f(document.querySelectorAll(".modal-add-user")),B=document.querySelector(".modal--add-user");0<N.length&&N.forEach(function(t){t.addEventListener("click",function(){A.classList.add("show","show-modal"),B.classList.add("show")})});var D=f(document.querySelectorAll(".popup-cook-myself")),O=document.querySelector(".modal--recipe");if(0<D.length){D.forEach(function(t){t.addEventListener("click",function(t){t.preventDefault(),A.classList.add("show","show-modal"),O.classList.add("show")})});var H=O.querySelector(".modal__btn-title"),R=O.querySelector(".modal__wrap-hidden"),I=O.querySelector(".modal__btn-close-wrap-hidden");H.addEventListener("click",function(){R.classList.add("show")}),I.addEventListener("click",function(){R.classList.remove("show")})}var P=f(document.querySelectorAll(".form__recovery-input input"));if(0<P.length){var W=!0,z=!1,F=void 0;try{for(var j,V=function(){var t=j.value;t.addEventListener("input",function(){t.value?t.parentElement.classList.add("hide"):t.parentElement.classList.remove("hide")})},G=P[Symbol.iterator]();!(W=(j=G.next()).done);W=!0)V()}catch(t){z=!0,F=t}finally{try{W||null==G.return||G.return()}finally{if(z)throw F}}}Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var Q=window,xi=Q.requestAnimationFrame||Q.webkitRequestAnimationFrame||Q.mozRequestAnimationFrame||Q.msRequestAnimationFrame||function(t){return setTimeout(t,16)},X=window,Li=X.cancelAnimationFrame||X.mozCancelAnimationFrame||function(t){clearTimeout(t)};function Ei(t){for(var e,n,i,r=t||{},o=1,a=arguments.length;o<a;o++)if(null!==(e=arguments[o]))for(n in e)r!==(i=e[n])&&void 0!==i&&(r[n]=i);return r}function Si(t){return 0<=["true","false"].indexOf(t)?JSON.parse(t):t}function Ci(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function Mi(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var Y=document.documentElement;function Ti(t){var e="";return t.fake&&(e=Y.style.overflow,t.style.background="",t.style.overflow=Y.style.overflow="hidden",Y.appendChild(t)),e}function Ai(t,e){t.fake&&(t.remove(),Y.style.overflow=e,Y.offsetHeight)}function _i(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function ki(t){return("insertRule"in t?t.cssRules:t.rules).length}function qi(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i)}var K="classList"in document.createElement("_"),Ni=K?function(t,e){return t.classList.contains(e)}:function(t,e){return 0<=t.className.indexOf(e)},Bi=K?function(t,e){Ni(t,e)||t.classList.add(e)}:function(t,e){Ni(t,e)||(t.className+=" "+e)},Di=K?function(t,e){Ni(t,e)&&t.classList.remove(e)}:function(t,e){Ni(t,e)&&(t.className=t.className.replace(e,""))};function Oi(t,e){return t.hasAttribute(e)}function Hi(t,e){return t.getAttribute(e)}function J(t){return void 0!==t.item}function Ri(t,e){if(t=J(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function Ii(t,e){t=J(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var r=n;r--;)t[i].removeAttribute(e[r])}function Pi(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function Wi(t,e){"none"!==t.style.display&&(t.style.display="none")}function zi(t,e){"none"===t.style.display&&(t.style.display="")}function Fi(t){return"none"!==window.getComputedStyle(t).display}function ji(e){if("string"==typeof e){var n=[e],i=e.charAt(0).toUpperCase()+e.substr(1);["Webkit","Moz","ms","O"].forEach(function(t){"ms"===t&&"transform"!==e||n.push(t+i)}),e=n}for(var t=document.createElement("fakeelement"),r=(e.length,0);r<e.length;r++){var o=e[r];if(void 0!==t.style[o])return o}return!1}function Vi(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var U=!1;try{var Z=Object.defineProperty({},"passive",{get:function(){U=!0}});window.addEventListener("test",null,Z)}catch(t){}var $=!!U&&{passive:!0};function Gi(t,e,n){for(var i in e){var r=0<=["touchstart","touchmove"].indexOf(i)&&!n&&$;t.addEventListener(i,e[i],r)}}function Qi(t,e){for(var n in e){var i=0<=["touchstart","touchmove"].indexOf(n)&&$;t.removeEventListener(n,e[n],i)}}function Xi(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(e,n){n.type=e,this.topics[e]&&this.topics[e].forEach(function(t){t(n,e)})}}}var Yi=function(_){_=Ei({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},_||{});var k=document,p=window,r={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},e={},n=_.useLocalStorage;if(n){var t=navigator.userAgent,i=new Date;try{(e=p.localStorage)?(e.setItem(i,i),n=e.getItem(i)==i,e.removeItem(i)):n=!1,n||(e={})}catch(t){n=!1}n&&(e.tnsApp&&e.tnsApp!==t&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(t){e.removeItem(t)}),localStorage.tnsApp=t)}var y=e.tC?Si(e.tC):Ci(e,"tC",function(){var t=document,e=Mi(),n=Ti(e),i=t.createElement("div"),r=!1;e.appendChild(i);try{for(var o,a="(10px * 10)",l=["calc"+a,"-moz-calc"+a,"-webkit-calc"+a],s=0;s<3;s++)if(o=l[s],i.style.width=o,100===i.offsetWidth){r=o.replace(a,"");break}}catch(t){}return e.fake?Ai(e,n):i.remove(),r}(),n),g=e.tPL?Si(e.tPL):Ci(e,"tPL",function(){var t,e=document,n=Mi(),i=Ti(n),r=e.createElement("div"),o=e.createElement("div"),a="";r.className="tns-t-subp2",o.className="tns-t-ct";for(var l=0;l<70;l++)a+="<div></div>";return o.innerHTML=a,r.appendChild(o),n.appendChild(r),t=Math.abs(r.getBoundingClientRect().left-o.children[67].getBoundingClientRect().left)<2,n.fake?Ai(n,i):r.remove(),t}(),n),q=e.tMQ?Si(e.tMQ):Ci(e,"tMQ",function(){var t,e=document,n=Mi(),i=Ti(n),r=e.createElement("div"),o=e.createElement("style"),a="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return o.type="text/css",r.className="tns-mq-test",n.appendChild(o),n.appendChild(r),o.styleSheet?o.styleSheet.cssText=a:o.appendChild(e.createTextNode(a)),t=window.getComputedStyle?window.getComputedStyle(r).position:r.currentStyle.position,n.fake?Ai(n,i):r.remove(),"absolute"===t}(),n),o=e.tTf?Si(e.tTf):Ci(e,"tTf",ji("transform"),n),a=e.t3D?Si(e.t3D):Ci(e,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=Mi(),r=Ti(i),o=n.createElement("p"),a=9<t.length?"-"+t.slice(0,-9).toLowerCase()+"-":"";return a+="transform",i.insertBefore(o,null),o.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(o).getPropertyValue(a),i.fake?Ai(i,r):o.remove(),void 0!==e&&0<e.length&&"none"!==e}(o),n),b=e.tTDu?Si(e.tTDu):Ci(e,"tTDu",ji("transitionDuration"),n),l=e.tTDe?Si(e.tTDe):Ci(e,"tTDe",ji("transitionDelay"),n),w=e.tADu?Si(e.tADu):Ci(e,"tADu",ji("animationDuration"),n),s=e.tADe?Si(e.tADe):Ci(e,"tADe",ji("animationDelay"),n),u=e.tTE?Si(e.tTE):Ci(e,"tTE",Vi(b,"Transition"),n),c=e.tAE?Si(e.tAE):Ci(e,"tAE",Vi(w,"Animation"),n),d=p.console&&"function"==typeof p.console.warn,f=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],v={};if(f.forEach(function(t){if("string"==typeof _[t]){var e=_[t],n=k.querySelector(e);if(v[t]=e,!n||!n.nodeName)return void(d&&console.warn("Can't find",_[t]));_[t]=n}}),!(_.container.children.length<1)){var N=_.responsive,B=_.nested,D="carousel"===_.mode;if(N){0 in N&&(_=Ei(_,N[0]),delete N[0]);var m={};for(var h in N){var x=N[h];x="number"==typeof x?{items:x}:x,m[h]=x}N=m,m=null}if(D||!function t(e){for(var n in e)D||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(_),!D){_.axis="horizontal",_.slideBy="page",_.edgePadding=!1;var O=_.animateIn,H=_.animateOut,L=_.animateDelay,R=_.animateNormal}var E,I,P="horizontal"===_.axis,S=k.createElement("div"),W=k.createElement("div"),z=_.container,C=z.parentNode,M=z.outerHTML,F=z.children,j=F.length,V=Ze(),G=!1;N&&bn(),D&&(z.className+=" tns-vpfix");var T,A,Q,X,Y,K=_.autoWidth,J=nn("fixedWidth"),U=nn("edgePadding"),Z=nn("gutter"),$=tn(),tt=nn("center"),et=K?1:Math.floor(nn("items")),nt=nn("slideBy"),it=_.viewportMax||_.fixedWidthViewportWidth,rt=nn("arrowKeys"),ot=nn("speed"),at=_.rewind,lt=!at&&_.loop,st=nn("autoHeight"),ut=nn("controls"),ct=nn("controlsText"),dt=nn("nav"),ft=nn("touch"),vt=nn("mouseDrag"),mt=nn("autoplay"),ht=nn("autoplayTimeout"),pt=nn("autoplayText"),yt=nn("autoplayHoverPause"),gt=nn("autoplayResetOnVisibility"),bt=function(t){var e=document.createElement("style");return t&&e.setAttribute("media",t),document.querySelector("head").appendChild(e),e.sheet?e.sheet:e.styleSheet}(),wt=_.lazyload,xt=(_.lazyloadSelector,[]),Lt=lt?(X=function(){{if(K||J&&!it)return j-1;var t=J?"fixedWidth":"items",e=[];if((J||_[t]<j)&&e.push(_[t]),N)for(var n in N){var i=N[n][t];i&&(J||i<j)&&e.push(i)}return e.length||e.push(0),Math.ceil(J?it/Math.min.apply(null,e):Math.max.apply(null,e))}}(),Y=D?Math.ceil((5*X-j)/2):4*X-j,Y=Math.max(X,Y),en("edgePadding")?Y+1:Y):0,Et=D?j+2*Lt:j+Lt,St=!(!J&&!K||lt),Ct=J?Qn():null,Mt=!D||!lt,Tt=P?"left":"top",At="",_t="",kt=J?function(){return tt&&!lt?j-1:Math.ceil(-Ct/(J+Z))}:K?function(){for(var t=Et;t--;)if(T[t]>=-Ct)return t}:function(){return tt&&D&&!lt?j-1:lt||D?Math.max(0,Et-Math.ceil(et)):Et-1},qt=Ke(nn("startIndex")),Nt=qt,Bt=(Ye(),0),Dt=K?null:kt(),Ot=_.preventActionWhenRunning,Ht=_.swipeAngle,Rt=!Ht||"?",It=!1,Pt=_.onInit,Wt=new Xi,zt=" tns-slider tns-"+_.mode,Ft=z.id||function(){var t=window.tnsId;return window.tnsId=t?t+1:1,"tns"+window.tnsId}(),jt=nn("disable"),Vt=!1,Gt=_.freezable,Qt=!(!Gt||K)&&gn(),Xt=!1,Yt={click:ei,keydown:function(t){t=ui(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);0<=e&&(0===e?he.disabled||ei(t,-1):pe.disabled||ei(t,1))}},Kt={click:function(t){if(It){if(Ot)return;$n()}var e=ci(t=ui(t));for(;e!==we&&!Oi(e,"data-nav");)e=e.parentNode;if(Oi(e,"data-nav")){var n=Se=Number(Hi(e,"data-nav")),i=J||K?n*j/Le:n*et;ti(ie?n:Math.min(Math.ceil(i),j-1),t),Ce===n&&(qe&&ai(),Se=-1)}},keydown:function(t){t=ui(t);var e=k.activeElement;if(!Oi(e,"data-nav"))return;var n=[r.LEFT,r.RIGHT,r.ENTER,r.SPACE].indexOf(t.keyCode),i=Number(Hi(e,"data-nav"));0<=n&&(0===n?0<i&&si(be[i-1]):1===n?i<Le-1&&si(be[i+1]):ti(Se=i,t))}},Jt={mouseover:function(){qe&&(ii(),Ne=!0)},mouseout:function(){Ne&&(ni(),Ne=!1)}},Ut={visibilitychange:function(){k.hidden?qe&&(ii(),De=!0):De&&(ni(),De=!1)}},Zt={keydown:function(t){t=ui(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);0<=e&&ei(t,0===e?-1:1)}},$t={touchstart:mi,touchmove:hi,touchend:pi,touchcancel:pi},te={mousedown:mi,mousemove:hi,mouseup:pi,mouseleave:pi},ee=en("controls"),ne=en("nav"),ie=!!K||_.navAsThumbnails,re=en("autoplay"),oe=en("touch"),ae=en("mouseDrag"),le="tns-slide-active",se="tns-complete",ue={load:function(t){An(ci(t))},error:function(t){!function(t){Bi(t,"failed"),_n(t)}(ci(t))}},ce="force"===_.preventScrollOnTouch;if(ee)var de,fe,ve=_.controlsContainer,me=_.controlsContainer?_.controlsContainer.outerHTML:"",he=_.prevButton,pe=_.nextButton,ye=_.prevButton?_.prevButton.outerHTML:"",ge=_.nextButton?_.nextButton.outerHTML:"";if(ne)var be,we=_.navContainer,xe=_.navContainer?_.navContainer.outerHTML:"",Le=K?j:gi(),Ee=0,Se=-1,Ce=Ue(),Me=Ce,Te="tns-nav-active",Ae="Carousel Page ",_e=" (Current Slide)";if(re)var ke,qe,Ne,Be,De,Oe="forward"===_.autoplayDirection?1:-1,He=_.autoplayButton,Re=_.autoplayButton?_.autoplayButton.outerHTML:"",Ie=["<span class='tns-visually-hidden'>"," animation</span>"];if(oe||ae)var Pe,We,ze={},Fe={},je=!1,Ve=P?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};K||Xe(jt||Qt),o&&(Tt=o,At="translate",_t=a?(At+=P?"3d(":"3d(0px, ",P?", 0px, 0px)":", 0px)"):(At+=P?"X(":"Y(",")")),D&&(z.className=z.className.replace("tns-vpfix","")),function(){en("gutter");S.className="tns-outer",W.className="tns-inner",S.id=Ft+"-ow",W.id=Ft+"-iw",""===z.id&&(z.id=Ft);zt+=g||K?" tns-subpixel":" tns-no-subpixel",zt+=y?" tns-calc":" tns-no-calc",K&&(zt+=" tns-autowidth");zt+=" tns-"+_.axis,z.className+=zt,D?((E=k.createElement("div")).id=Ft+"-mw",E.className="tns-ovh",S.appendChild(E),E.appendChild(W)):S.appendChild(W);if(st){(E||W).className+=" tns-ah"}if(C.insertBefore(S,z),W.appendChild(z),qi(F,function(t,e){Bi(t,"tns-item"),t.id||(t.id=Ft+"-item"+e),!D&&R&&Bi(t,R),Ri(t,{"aria-hidden":"true",tabindex:"-1"})}),Lt){for(var t=k.createDocumentFragment(),e=k.createDocumentFragment(),n=Lt;n--;){var i=n%j,r=F[i].cloneNode(!0);if(Ii(r,"id"),e.insertBefore(r,e.firstChild),D){var o=F[j-1-i].cloneNode(!0);Ii(o,"id"),t.appendChild(o)}}z.insertBefore(t,z.firstChild),z.appendChild(e),F=z.children}}(),function(){if(!D)for(var t=qt,e=qt+Math.min(j,et);t<e;t++){var n=F[t];n.style.left=100*(t-qt)/et+"%",Bi(n,O),Di(n,R)}P&&(g||K?(_i(bt,"#"+Ft+" > .tns-item","font-size:"+p.getComputedStyle(F[0]).fontSize+";",ki(bt)),_i(bt,"#"+Ft,"font-size:0;",ki(bt))):D&&qi(F,function(t,e){t.style.marginLeft=function(t){return y?y+"("+100*t+"% / "+Et+")":100*t/Et+"%"}(e)}));if(q){if(b){var i=E&&_.autoHeight?un(_.speed):"";_i(bt,"#"+Ft+"-mw",i,ki(bt))}i=rn(_.edgePadding,_.gutter,_.fixedWidth,_.speed,_.autoHeight),_i(bt,"#"+Ft+"-iw",i,ki(bt)),D&&(i=P&&!K?"width:"+on(_.fixedWidth,_.gutter,_.items)+";":"",b&&(i+=un(ot)),_i(bt,"#"+Ft,i,ki(bt))),i=P&&!K?an(_.fixedWidth,_.gutter,_.items):"",_.gutter&&(i+=ln(_.gutter)),D||(b&&(i+=un(ot)),w&&(i+=cn(ot))),i&&_i(bt,"#"+Ft+" > .tns-item",i,ki(bt))}else{Dn(),W.style.cssText=rn(U,Z,J,st),D&&P&&!K&&(z.style.width=on(J,Z,et));i=P&&!K?an(J,Z,et):"";Z&&(i+=ln(Z)),i&&_i(bt,"#"+Ft+" > .tns-item",i,ki(bt))}if(N&&q)for(var r in N){r=parseInt(r);var o=N[r],a=(i="",""),l="",s="",u="",c=K?null:nn("items",r),d=nn("fixedWidth",r),f=nn("speed",r),v=nn("edgePadding",r),m=nn("autoHeight",r),h=nn("gutter",r);b&&E&&nn("autoHeight",r)&&"speed"in o&&(a="#"+Ft+"-mw{"+un(f)+"}"),("edgePadding"in o||"gutter"in o)&&(l="#"+Ft+"-iw{"+rn(v,h,d,f,m)+"}"),D&&P&&!K&&("fixedWidth"in o||"items"in o||J&&"gutter"in o)&&(s="width:"+on(d,h,c)+";"),b&&"speed"in o&&(s+=un(f)),s=s&&"#"+Ft+"{"+s+"}",("fixedWidth"in o||J&&"gutter"in o||!D&&"items"in o)&&(u+=an(d,h,c)),"gutter"in o&&(u+=ln(h)),!D&&"speed"in o&&(b&&(u+=un(f)),w&&(u+=cn(f))),(i=a+l+s+(u=u&&"#"+Ft+" > .tns-item{"+u+"}"))&&bt.insertRule("@media (min-width: "+r/16+"em) {"+i+"}",bt.cssRules.length)}}(),dn();var Ge=lt?D?function(){var t=Bt,e=Dt;t+=nt,e-=nt,U?(t+=1,e-=1):J&&($+Z)%(J+Z)&&(e-=1),Lt&&(e<qt?qt-=j:qt<t&&(qt+=j))}:function(){if(Dt<qt)for(;Bt+j<=qt;)qt-=j;else if(qt<Bt)for(;qt<=Dt-j;)qt+=j}:function(){qt=Math.max(Bt,Math.min(Dt,qt))},Qe=D?function(){Vn(z,""),b||!ot?(Kn(),ot&&Fi(z)||$n()):function(e,n,i,r,t,o,a){var l=Math.min(o,10),s=0<=t.indexOf("%")?"%":"px",u=(t=t.replace(s,""),Number(e.style[n].replace(i,"").replace(r,"").replace(s,""))),c=(t-u)/o*l;setTimeout(function t(){o-=l,u+=c,e.style[n]=i+u+s+r,0<o?setTimeout(t,l):a()},l)}(z,Tt,At,_t,Xn(),ot,$n),P||yi()}:function(){xt=[];var t={};t[u]=t[c]=$n,Qi(F[Nt],t),Gi(F[qt],t),Jn(Nt,O,H,!0),Jn(qt,R,O),u&&c&&ot&&Fi(z)||$n()};return{version:"2.9.2",getInfo:wi,events:Wt,goTo:ti,play:function(){mt&&!qe&&(oi(),Be=!1)},pause:function(){qe&&(ai(),Be=!0)},isOn:G,updateSliderHeight:Hn,refresh:dn,destroy:function(){if(bt.disabled=!0,bt.ownerNode&&bt.ownerNode.remove(),Qi(p,{resize:pn}),rt&&Qi(k,Zt),ve&&Qi(ve,Yt),we&&Qi(we,Kt),Qi(z,Jt),Qi(z,Ut),He&&Qi(He,{click:li}),mt&&clearInterval(ke),D&&u){var t={};t[u]=$n,Qi(z,t)}ft&&Qi(z,$t),vt&&Qi(z,te);var o=[M,me,ye,ge,xe,Re];for(var e in f.forEach(function(t,e){var n="container"===t?S:_[t];if("object"==typeof n){var i=!!n.previousElementSibling&&n.previousElementSibling,r=n.parentNode;n.outerHTML=o[e],_[t]=i?i.nextElementSibling:r.firstElementChild}}),f=O=H=L=R=P=S=W=z=C=M=F=j=I=V=K=J=U=Z=$=et=nt=it=rt=ot=at=lt=st=bt=wt=T=xt=Lt=Et=St=Ct=Mt=Tt=At=_t=kt=qt=Nt=Bt=Dt=Ht=Rt=It=Pt=Wt=zt=Ft=jt=Vt=Gt=Qt=Xt=Yt=Kt=Jt=Ut=Zt=$t=te=ee=ne=ie=re=oe=ae=le=se=ue=A=ut=ct=ve=me=he=pe=de=fe=dt=we=xe=be=Le=Ee=Se=Ce=Me=Te=Ae=_e=mt=ht=Oe=pt=yt=He=Re=gt=Ie=ke=qe=Ne=Be=De=ze=Fe=Pe=je=We=Ve=ft=vt=null,this)"rebuild"!==e&&(this[e]=null);G=!1},rebuild:function(){return Yi(Ei(_,v))}}}function Xe(t){t&&(ut=dt=ft=vt=rt=mt=yt=gt=!1)}function Ye(){for(var t=D?qt-Lt:qt;t<0;)t+=j;return t%j+1}function Ke(t){return t=t?Math.max(0,Math.min(lt?j-1:j-et,t)):0,D?t+Lt:t}function Je(t){for(null==t&&(t=qt),D&&(t-=Lt);t<0;)t+=j;return Math.floor(t%j)}function Ue(){var t,e=Je();return t=ie?e:J||K?Math.ceil((e+1)*Le/j-1):Math.floor(e/et),!lt&&D&&qt===Dt&&(t=Le-1),t}function Ze(){return p.innerWidth||k.documentElement.clientWidth||k.body.clientWidth}function $e(t){return"top"===t?"afterbegin":"beforeend"}function tn(){var t=U?2*U-Z:0;return function t(e){var n,i,r=k.createElement("div");return e.appendChild(r),i=(n=r.getBoundingClientRect()).right-n.left,r.remove(),i||t(e.parentNode)}(C)-t}function en(t){if(_[t])return!0;if(N)for(var e in N)if(N[e][t])return!0;return!1}function nn(t,e){if(null==e&&(e=V),"items"===t&&J)return Math.floor(($+Z)/(J+Z))||1;var n=_[t];if(N)for(var i in N)e>=parseInt(i)&&t in N[i]&&(n=N[i][t]);return"slideBy"===t&&"page"===n&&(n=nn("items")),D||"slideBy"!==t&&"items"!==t||(n=Math.floor(n)),n}function rn(t,e,n,i,r){var o="";if(void 0!==t){var a=t;e&&(a-=e),o=P?"margin: 0 "+a+"px 0 "+t+"px;":"margin: "+t+"px 0 "+a+"px 0;"}else if(e&&!n){var l="-"+e+"px";o="margin: 0 "+(P?l+" 0 0":"0 "+l+" 0")+";"}return!D&&r&&b&&i&&(o+=un(i)),o}function on(t,e,n){return t?(t+e)*Et+"px":y?y+"("+100*Et+"% / "+n+")":100*Et/n+"%"}function an(t,e,n){var i;if(t)i=t+e+"px";else{D||(n=Math.floor(n));var r=D?Et:n;i=y?y+"(100% / "+r+")":100/r+"%"}return i="width:"+i,"inner"!==B?i+";":i+" !important;"}function ln(t){var e="";!1!==t&&(e=(P?"padding-":"margin-")+(P?"right":"bottom")+": "+t+"px;");return e}function sn(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n=n&&"-"+n+"-"}function un(t){return sn(b,18)+"transition-duration:"+t/1e3+"s;"}function cn(t){return sn(w,17)+"animation-duration:"+t/1e3+"s;"}function dn(){if(en("autoHeight")||K||!P){var t=z.querySelectorAll("img");qi(t,function(t){var e=t.src;e&&e.indexOf("data:image")<0?(Gi(t,ue),t.src="",t.src=e,Bi(t,"loading")):wt||An(t)}),xi(function(){Nn(Pi(t),function(){A=!0})}),!K&&P&&(t=kn(qt,Math.min(qt+et-1,Et-1))),wt?fn():xi(function(){Nn(Pi(t),fn)})}else D&&Yn(),mn(),hn()}function fn(){if(K){var e=lt?qt:j-1;!function t(){F[e-1].getBoundingClientRect().right.toFixed(2)===F[e].getBoundingClientRect().left.toFixed(2)?vn():setTimeout(function(){t()},16)}()}else vn()}function vn(){P&&!K||(Rn(),K?(Ct=Qn(),Gt&&(Qt=gn()),Dt=kt(),Xe(jt||Qt)):yi()),D&&Yn(),mn(),hn()}function mn(){if(In(),S.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+Cn()+"</span>  of "+j+"</div>"),Q=S.querySelector(".tns-liveregion .current"),re){var t=mt?"stop":"start";He?Ri(He,{"data-action":t}):_.autoplayButtonOutput&&(S.insertAdjacentHTML($e(_.autoplayPosition),'<button data-action="'+t+'">'+Ie[0]+t+Ie[1]+pt[0]+"</button>"),He=S.querySelector("[data-action]")),He&&Gi(He,{click:li}),mt&&(oi(),yt&&Gi(z,Jt),gt&&Gi(z,Ut))}if(ne){if(we)Ri(we,{"aria-label":"Carousel Pagination"}),qi(be=we.children,function(t,e){Ri(t,{"data-nav":e,tabindex:"-1","aria-label":Ae+(e+1),"aria-controls":Ft})});else{for(var e="",n=ie?"":'style="display:none"',i=0;i<j;i++)e+='<button data-nav="'+i+'" tabindex="-1" aria-controls="'+Ft+'" '+n+' aria-label="'+Ae+(i+1)+'"></button>';e='<div class="tns-nav" aria-label="Carousel Pagination">'+e+"</div>",S.insertAdjacentHTML($e(_.navPosition),e),we=S.querySelector(".tns-nav"),be=we.children}if(bi(),b){var r=b.substring(0,b.length-18).toLowerCase(),o="transition: all "+ot/1e3+"s";r&&(o="-"+r+"-"+o),_i(bt,"[aria-controls^="+Ft+"-item]",o,ki(bt))}Ri(be[Ce],{"aria-label":Ae+(Ce+1)+_e}),Ii(be[Ce],"tabindex"),Bi(be[Ce],Te),Gi(we,Kt)}ee&&(ve||he&&pe||(S.insertAdjacentHTML($e(_.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+Ft+'">'+ct[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+Ft+'">'+ct[1]+"</button></div>"),ve=S.querySelector(".tns-controls")),he&&pe||(he=ve.children[0],pe=ve.children[1]),_.controlsContainer&&Ri(ve,{"aria-label":"Carousel Navigation",tabindex:"0"}),(_.controlsContainer||_.prevButton&&_.nextButton)&&Ri([he,pe],{"aria-controls":Ft,tabindex:"-1"}),(_.controlsContainer||_.prevButton&&_.nextButton)&&(Ri(he,{"data-controls":"prev"}),Ri(pe,{"data-controls":"next"})),de=Wn(he),fe=Wn(pe),jn(),ve?Gi(ve,Yt):(Gi(he,Yt),Gi(pe,Yt))),wn()}function hn(){if(D&&u){var t={};t[u]=$n,Gi(z,t)}ft&&Gi(z,$t,_.preventScrollOnTouch),vt&&Gi(z,te),rt&&Gi(k,Zt),"inner"===B?Wt.on("outerResized",function(){yn(),Wt.emit("innerLoaded",wi())}):(N||J||K||st||!P)&&Gi(p,{resize:pn}),st&&("outer"===B?Wt.on("innerLoaded",qn):jt||qn()),Tn(),jt?En():Qt&&Ln(),Wt.on("indexChanged",Bn),"inner"===B&&Wt.emit("innerLoaded",wi()),"function"==typeof Pt&&Pt(wi()),G=!0}function pn(t){xi(function(){yn(ui(t))})}function yn(t){if(G){"outer"===B&&Wt.emit("outerResized",wi(t)),V=Ze();var e,n=I,i=!1;N&&(bn(),(e=n!==I)&&Wt.emit("newBreakpointStart",wi(t)));var r,o,a=et,l=jt,s=Qt,u=rt,c=ut,d=dt,f=ft,v=vt,m=mt,h=yt,p=gt,y=qt;if(e){var g=J,b=st,w=ct,x=tt,L=pt;if(!q)var E=Z,S=U}if(rt=nn("arrowKeys"),ut=nn("controls"),dt=nn("nav"),ft=nn("touch"),tt=nn("center"),vt=nn("mouseDrag"),mt=nn("autoplay"),yt=nn("autoplayHoverPause"),gt=nn("autoplayResetOnVisibility"),e&&(jt=nn("disable"),J=nn("fixedWidth"),ot=nn("speed"),st=nn("autoHeight"),ct=nn("controlsText"),pt=nn("autoplayText"),ht=nn("autoplayTimeout"),q||(U=nn("edgePadding"),Z=nn("gutter"))),Xe(jt),$=tn(),P&&!K||jt||(Rn(),P||(yi(),i=!0)),(J||K)&&(Ct=Qn(),Dt=kt()),(e||J)&&(et=nn("items"),nt=nn("slideBy"),(o=et!==a)&&(J||K||(Dt=kt()),Ge())),e&&jt!==l&&(jt?En():function(){if(!Vt)return;if(bt.disabled=!1,z.className+=zt,Yn(),lt)for(var t=Lt;t--;)D&&zi(F[t]),zi(F[Et-t-1]);if(!D)for(var e=qt,n=qt+j;e<n;e++){var i=F[e],r=e<qt+et?O:R;i.style.left=100*(e-qt)/et+"%",Bi(i,r)}xn(),Vt=!1}()),Gt&&(e||J||K)&&(Qt=gn())!==s&&(Qt?(Kn(Xn(Ke(0))),Ln()):(function(){if(!Xt)return;U&&q&&(W.style.margin="");if(Lt)for(var t="tns-transparent",e=Lt;e--;)D&&Di(F[e],t),Di(F[Et-e-1],t);xn(),Xt=!1}(),i=!0)),Xe(jt||Qt),mt||(yt=gt=!1),rt!==u&&(rt?Gi(k,Zt):Qi(k,Zt)),ut!==c&&(ut?ve?zi(ve):(he&&zi(he),pe&&zi(pe)):ve?Wi(ve):(he&&Wi(he),pe&&Wi(pe))),dt!==d&&(dt?zi(we):Wi(we)),ft!==f&&(ft?Gi(z,$t,_.preventScrollOnTouch):Qi(z,$t)),vt!==v&&(vt?Gi(z,te):Qi(z,te)),mt!==m&&(mt?(He&&zi(He),qe||Be||oi()):(He&&Wi(He),qe&&ai())),yt!==h&&(yt?Gi(z,Jt):Qi(z,Jt)),gt!==p&&(gt?Gi(k,Ut):Qi(k,Ut)),e){if(J===g&&tt===x||(i=!0),st!==b&&(st||(W.style.height="")),ut&&ct!==w&&(he.innerHTML=ct[0],pe.innerHTML=ct[1]),He&&pt!==L){var C=mt?1:0,M=He.innerHTML,T=M.length-L[C].length;M.substring(T)===L[C]&&(He.innerHTML=M.substring(0,T)+pt[C])}}else tt&&(J||K)&&(i=!0);if((o||J&&!K)&&(Le=gi(),bi()),(r=qt!==y)?(Wt.emit("indexChanged",wi()),i=!0):o?r||Bn():(J||K)&&(Tn(),In(),Sn()),o&&!D&&function(){for(var t=qt+Math.min(j,et),e=Et;e--;){var n=F[e];qt<=e&&e<t?(Bi(n,"tns-moving"),n.style.left=100*(e-qt)/et+"%",Bi(n,O),Di(n,R)):n.style.left&&(n.style.left="",Bi(n,R),Di(n,O)),Di(n,H)}setTimeout(function(){qi(F,function(t){Di(t,"tns-moving")})},300)}(),!jt&&!Qt){if(e&&!q&&(st===autoheightTem&&ot===speedTem||Dn(),U===S&&Z===E||(W.style.cssText=rn(U,Z,J,ot,st)),P)){D&&(z.style.width=on(J,Z,et));var A=an(J,Z,et)+ln(Z);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(bt,ki(bt)-1),_i(bt,"#"+Ft+" > .tns-item",A,ki(bt))}st&&qn(),i&&(Yn(),Nt=qt)}e&&Wt.emit("newBreakpointEnd",wi(t))}}function gn(){if(!J&&!K)return j<=(tt?et-(et-1)/2:et);var t=J?(J+Z)*j:T[j],e=U?$+2*U:$+Z;return tt&&(e-=J?($-J)/2:($-(T[qt+1]-T[qt]-Z))/2),t<=e}function bn(){for(var t in I=0,N)(t=parseInt(t))<=V&&(I=t)}function wn(){!mt&&He&&Wi(He),!dt&&we&&Wi(we),ut||(ve?Wi(ve):(he&&Wi(he),pe&&Wi(pe)))}function xn(){mt&&He&&zi(He),dt&&we&&zi(we),ut&&(ve?zi(ve):(he&&zi(he),pe&&zi(pe)))}function Ln(){if(!Xt){if(U&&(W.style.margin="0px"),Lt)for(var t="tns-transparent",e=Lt;e--;)D&&Bi(F[e],t),Bi(F[Et-e-1],t);wn(),Xt=!0}}function En(){if(!Vt){if(bt.disabled=!0,z.className=z.className.replace(zt.substring(1),""),Ii(z,["style"]),lt)for(var t=Lt;t--;)D&&Wi(F[t]),Wi(F[Et-t-1]);if(P&&D||Ii(W,["style"]),!D)for(var e=qt,n=qt+j;e<n;e++){var i=F[e];Ii(i,["style"]),Di(i,O),Di(i,R)}wn(),Vt=!0}}function Sn(){var t=Cn();Q.innerHTML!==t&&(Q.innerHTML=t)}function Cn(){var t=Mn(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function Mn(t){null==t&&(t=Xn());var n,i,r,o=qt;if(tt||U?(K||J)&&(i=-(parseFloat(t)+U),r=i+$+2*U):K&&(i=T[qt],r=i+$),K)T.forEach(function(t,e){e<Et&&((tt||U)&&t<=i+.5&&(o=e),.5<=r-t&&(n=e))});else{if(J){var e=J+Z;n=tt||U?(o=Math.floor(i/e),Math.ceil(r/e-1)):o+Math.ceil($/e)-1}else if(tt||U){var a=et-1;if(n=tt?(o-=a/2,qt+a/2):qt+a,U){var l=U*et/$;o-=l,n+=l}o=Math.floor(o),n=Math.ceil(n)}else n=o+et-1;o=Math.max(o,0),n=Math.min(n,Et-1)}return[o,n]}function Tn(){wt&&!jt&&kn.apply(null,Mn()).forEach(function(t){if(!Ni(t,se)){var e={};e[u]=function(t){t.stopPropagation()},Gi(t,e),Gi(t,ue),t.src=Hi(t,"data-src");var n=Hi(t,"data-srcset");n&&(t.srcset=n),Bi(t,"loading")}})}function An(t){Bi(t,"loaded"),_n(t)}function _n(t){Bi(t,"tns-complete"),Di(t,"loading"),Qi(t,ue)}function kn(t,e){for(var n=[];t<=e;)qi(F[t].querySelectorAll("img"),function(t){n.push(t)}),t++;return n}function qn(){var t=kn.apply(null,Mn());xi(function(){Nn(t,Hn)})}function Nn(n,t){return A?t():(n.forEach(function(t,e){Ni(t,se)&&n.splice(e,1)}),n.length?void xi(function(){Nn(n,t)}):t())}function Bn(){Tn(),In(),Sn(),jn(),function(){if(dt&&(Ce=0<=Se?Se:Ue(),Se=-1,Ce!==Me)){var t=be[Me],e=be[Ce];Ri(t,{tabindex:"-1","aria-label":Ae+(Me+1)}),Di(t,Te),Ri(e,{"aria-label":Ae+(Ce+1)+_e}),Ii(e,"tabindex"),Bi(e,Te),Me=Ce}}()}function Dn(){D&&st&&(E.style[b]=ot/1e3+"s")}function On(t,e){for(var n=[],i=t,r=Math.min(t+e,Et);i<r;i++)n.push(F[i].offsetHeight);return Math.max.apply(null,n)}function Hn(){var t=st?On(qt,et):On(Lt,j),e=E||W;e.style.height!==t&&(e.style.height=t+"px")}function Rn(){T=[0];var n=P?"left":"top",i=P?"right":"bottom",r=F[0].getBoundingClientRect()[n];qi(F,function(t,e){e&&T.push(t.getBoundingClientRect()[n]-r),e===Et-1&&T.push(t.getBoundingClientRect()[i]-r)})}function In(){var t=Mn(),n=t[0],i=t[1];qi(F,function(t,e){n<=e&&e<=i?Oi(t,"aria-hidden")&&(Ii(t,["aria-hidden","tabindex"]),Bi(t,le)):Oi(t,"aria-hidden")||(Ri(t,{"aria-hidden":"true",tabindex:"-1"}),Di(t,le))})}function Pn(t){return t.nodeName.toLowerCase()}function Wn(t){return"button"===Pn(t)}function zn(t){return"true"===t.getAttribute("aria-disabled")}function Fn(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function jn(){if(ut&&!at&&!lt){var t=de?he.disabled:zn(he),e=fe?pe.disabled:zn(pe),n=qt<=Bt,i=!at&&Dt<=qt;n&&!t&&Fn(de,he,!0),!n&&t&&Fn(de,he,!1),i&&!e&&Fn(fe,pe,!0),!i&&e&&Fn(fe,pe,!1)}}function Vn(t,e){b&&(t.style[b]=e)}function Gn(t){return null==t&&(t=qt),K?($-(U?Z:0)-(T[t+1]-T[t]-Z))/2:J?($-J)/2:(et-1)/2}function Qn(){var t=$+(U?Z:0)-(J?(J+Z)*Et:T[Et]);return tt&&!lt&&(t=J?-(J+Z)*(Et-1)-Gn():Gn(Et-1)-T[Et-1]),0<t&&(t=0),t}function Xn(t){var e;if(null==t&&(t=qt),P&&!K)if(J)e=-(J+Z)*t,tt&&(e+=Gn());else{var n=o?Et:et;tt&&(t-=Gn()),e=100*-t/n}else e=-T[t],tt&&K&&(e+=Gn());return St&&(e=Math.max(e,Ct)),e+=!P||K||J?"px":"%"}function Yn(t){Vn(z,"0s"),Kn(t)}function Kn(t){null==t&&(t=Xn()),z.style[Tt]=At+t+_t}function Jn(t,e,n,i){var r=t+et;lt||(r=Math.min(r,Et));for(var o=t;o<r;o++){var a=F[o];i||(a.style.left=100*(o-qt)/et+"%"),L&&l&&(a.style[l]=a.style[s]=L*(o-t)/1e3+"s"),Di(a,e),Bi(a,n),i&&xt.push(a)}}function Un(t,e){Mt&&Ge(),qt===Nt&&!e||(Wt.emit("indexChanged",wi()),Wt.emit("transitionStart",wi()),st&&qn(),qe&&t&&0<=["click","keydown"].indexOf(t.type)&&ai(),It=!0,Qe())}function Zn(t){return t.toLowerCase().replace(/-/g,"")}function $n(t){if(D||It){if(Wt.emit("transitionEnd",wi(t)),!D&&0<xt.length)for(var e=0;e<xt.length;e++){var n=xt[e];n.style.left="",s&&l&&(n.style[s]="",n.style[l]=""),Di(n,H),Bi(n,R)}if(!t||!D&&t.target.parentNode===z||t.target===z&&Zn(t.propertyName)===Zn(Tt)){if(!Mt){var i=qt;Ge(),qt!==i&&(Wt.emit("indexChanged",wi()),Yn())}"inner"===B&&Wt.emit("innerLoaded",wi()),It=!1,Nt=qt}}}function ti(t,e){if(!Qt)if("prev"===t)ei(e,-1);else if("next"===t)ei(e,1);else{if(It){if(Ot)return;$n()}var n=Je(),i=0;if("first"===t?i=-n:"last"===t?i=D?j-et-n:j-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(j-1,t))),i=t-n)),!D&&i&&Math.abs(i)<et){var r=0<i?1:-1;i+=Bt<=qt+i-j?j*r:2*j*r*-1}qt+=i,D&&lt&&(qt<Bt&&(qt+=j),Dt<qt&&(qt-=j)),Je(qt)!==Je(Nt)&&Un(e)}}function ei(t,e){if(It){if(Ot)return;$n()}var n;if(!e){for(var i=ci(t=ui(t));i!==ve&&[he,pe].indexOf(i)<0;)i=i.parentNode;var r=[he,pe].indexOf(i);0<=r&&(n=!0,e=0===r?-1:1)}if(at){if(qt===Bt&&-1===e)return void ti("last",t);if(qt===Dt&&1===e)return void ti("first",t)}e&&(qt+=nt*e,K&&(qt=Math.floor(qt)),Un(n||t&&"keydown"===t.type?t:null))}function ni(){ke=setInterval(function(){ei(null,Oe)},ht),qe=!0}function ii(){clearInterval(ke),qe=!1}function ri(t,e){Ri(He,{"data-action":t}),He.innerHTML=Ie[0]+t+Ie[1]+e}function oi(){ni(),He&&ri("stop",pt[1])}function ai(){ii(),He&&ri("start",pt[0])}function li(){Be=qe?(ai(),!0):(oi(),!1)}function si(t){t.focus()}function ui(t){return di(t=t||p.event)?t.changedTouches[0]:t}function ci(t){return t.target||p.event.srcElement}function di(t){return 0<=t.type.indexOf("touch")}function fi(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function vi(){return function(t,e){var n=!1,i=Math.abs(90-Math.abs(t));return 90-e<=i?n="horizontal":i<=e&&(n="vertical"),n}(function(t,e){return Math.atan2(t,e)*(180/Math.PI)}(Fe.y-ze.y,Fe.x-ze.x),Ht)===_.axis}function mi(t){if(It){if(Ot)return;$n()}mt&&qe&&ii(),je=!0,We&&(Li(We),We=null);var e=ui(t);Wt.emit(di(t)?"touchStart":"dragStart",wi(t)),!di(t)&&0<=["img","a"].indexOf(Pn(ci(t)))&&fi(t),Fe.x=ze.x=e.clientX,Fe.y=ze.y=e.clientY,D&&(Pe=parseFloat(z.style[Tt].replace(At,"")),Vn(z,"0s"))}function hi(t){if(je){var e=ui(t);Fe.x=e.clientX,Fe.y=e.clientY,D?We=We||xi(function(){!function t(e){if(!Rt)return void(je=!1);Li(We);je&&(We=xi(function(){t(e)}));"?"===Rt&&(Rt=vi());if(Rt){!ce&&di(e)&&(ce=!0);try{e.type&&Wt.emit(di(e)?"touchMove":"dragMove",wi(e))}catch(t){}var n=Pe,i=Ve(Fe,ze);if(!P||J||K)n+=i,n+="px";else{var r=o?i*et*100/(($+Z)*Et):100*i/($+Z);n+=r,n+="%"}z.style[Tt]=At+n+_t}}(t)}):("?"===Rt&&(Rt=vi()),Rt&&(ce=!0)),ce&&t.preventDefault()}}function pi(i){if(je){We&&(Li(We),We=null),D&&Vn(z,""),je=!1;var t=ui(i);Fe.x=t.clientX,Fe.y=t.clientY;var r=Ve(Fe,ze);if(Math.abs(r)){if(!di(i)){var n=ci(i);Gi(n,{click:function t(e){fi(e),Qi(n,{click:t})}})}D?We=xi(function(){if(P&&!K){var t=-r*et/($+Z);t=0<r?Math.floor(t):Math.ceil(t),qt+=t}else{var e=-(Pe+r);if(e<=0)qt=Bt;else if(e>=T[Et-1])qt=Dt;else for(var n=0;n<Et&&e>=T[n];)e>T[qt=n]&&r<0&&(qt+=1),n++}Un(i,r),Wt.emit(di(i)?"touchEnd":"dragEnd",wi(i))}):Rt&&ei(i,0<r?-1:1)}}"auto"===_.preventScrollOnTouch&&(ce=!1),Ht&&(Rt="?"),mt&&!qe&&ni()}function yi(){(E||W).style.height=T[qt+et]-T[qt]+"px"}function gi(){var t=J?(J+Z)*j/$:j/et;return Math.min(Math.ceil(t),j)}function bi(){if(dt&&!ie&&Le!==Ee){var t=Ee,e=Le,n=zi;for(Le<Ee&&(t=Le,e=Ee,n=Wi);t<e;)n(be[t]),t++;Ee=Le}}function wi(t){return{container:z,slideItems:F,navContainer:we,navItems:be,controlsContainer:ve,hasControls:ee,prevButton:he,nextButton:pe,items:et,slideBy:nt,cloneCount:Lt,slideCount:j,slideCountNew:Et,index:qt,indexCached:Nt,displayIndex:Ye(),navCurrentIndex:Ce,navCurrentIndexCached:Me,pages:Le,pagesCached:Ee,sheet:bt,isOn:G,event:t||{}}}d&&console.warn("No slides found in",_.container)},tt=document.querySelector(".menu__slides");if(tt){var et=document.querySelector(".menu__arrows"),nt=document.querySelector(".menu__slider-arrow--prev"),it=document.querySelector(".menu__slider-arrow--next");Yi({container:tt,mode:"gallery",controlsContainer:et,prevButton:nt,nextButton:it,nav:!1})}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,